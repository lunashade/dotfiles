[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # カラースキーマ
repo = 'morhetz/gruvbox'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme gruvbox
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    nnoremap [Gutter] <Nop>
    nmap <leader>z [Gutter]
    nnoremap [Gutter]j :GitGutterNextHunk<CR>
    nnoremap [Gutter]k :GitGutterPrevHunk<CR>
    nnoremap [Gutter]s :GitGutterStageHunk<CR>
    nnoremap [Gutter]u :GitGutterUndoHunk<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap [Fugitive] <Nop>
    nmap <leader>f [Fugitive]
    nnoremap [Fugitive]c :Gcommit<CR>
    nnoremap [Fugitive]s :Gstatus<CR>
    nnoremap [Fugitive]d :Gdiff<CR>
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let b:ale_linters = {
    \   'python': ['pyls'],
    \}
    let g:ale_statusline_format = ['E%d', 'W%d', 'ok']
    let b:ale_fixers = {
                \ 'python': ['pyls', 'isort'],
                \ 'c': ['clang-format'],
                \ 'go': ['gofmt', 'goimports']
                \}
    let g:ale_fix_on_save = 0

    nnoremap [ale] <Nop>
    nmap <leader>a [ale]
    nnoremap [ale]j :ALENext<CR>
    nnoremap [ale]f :ALEFix<CR>
    nnoremap [ale]l :ALELint<CR>
    nnoremap [ale]k :ALEPrevious<CR>
    nnoremap [ale]f :ALEFix<CR>
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
'''
hook_post_source = '''
  let g:deoplete#omni_patterns = {}
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_i = 1
on_ft = 'python'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename', 'modified' ],
    \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
    \ },
    \ }
'''
[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
depends = ['vim-lsp', 'deoplete']

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \     'linter_checking': 'left',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }
let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]] }
'''

[[plugins]]
repo = 'kana/vim-smartinput'

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
hook_add = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'zchee/deoplete-go'
depends = ['deoplete.nvim']
build = 'make'
on_i = 1
on_ft = 'go'
hook_add = '''
let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"
'''
